<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/CHEAT_SHEET.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CHEAT_SHEET.md" />
              <option name="originalContent" value="# ⚡ CHEAT SHEET - Vietnamese Voice Chatbot Pi 4&#10;&#10;##  CÀI ĐẶT NHANH (1 LỆNH)&#10;&#10;```bash&#10;cd ~ &amp;&amp; git clone https://github.com/YOUR_USERNAME/voice-chatbot.git &amp;&amp; cd voice-chatbot &amp;&amp; chmod +x pi4_auto_setup.sh &amp;&amp; ./pi4_auto_setup.sh&#10;```&#10;&#10;---&#10;&#10;##  LỆNH THƯỜNG DÙNG&#10;&#10;### Chạy chatbot:&#10;```bash&#10;cd ~/voice-chatbot &amp;&amp; ./start_hdmi_chatbot.sh    # GUI HDMI (khuyến nghị)&#10;chatbot &amp;&amp; start-chatbot                          # Alias ngắn&#10;python3 chatbot_vietnamese.py --lang vi          # Terminal only&#10;```&#10;&#10;### Kiểm tra:&#10;```bash&#10;./pi4_system_check.sh      # Kiểm tra toàn bộ hệ thống&#10;./quick_test.sh            # Test nhanh&#10;free -h                    # Check RAM&#10;vcgencmd measure_temp      # Check nhiệt độ&#10;```&#10;&#10;### Audio:&#10;```bash&#10;wpctl status                          # List tất cả audio devices&#10;wpctl status | grep &quot;Audio/Source&quot;    # List microphones&#10;wpctl status | grep &quot;Audio/Sink&quot;      # List speakers&#10;wpctl set-default &lt;ID&gt;                # Set default device&#10;```&#10;&#10;### Bluetooth:&#10;```bash&#10;bluetoothctl                # Vào Bluetooth control&#10;&gt; power on&#10;&gt; scan on&#10;&gt; pair XX:XX:XX:XX:XX:XX&#10;&gt; trust XX:XX:XX:XX:XX:XX&#10;&gt; connect XX:XX:XX:XX:XX:XX&#10;&gt; exit&#10;```&#10;&#10;### Ollama:&#10;```bash&#10;ollama list                           # List models&#10;ollama pull qwen2:0.5b               # Download model&#10;ollama run qwen2:0.5b &quot;Test&quot;         # Test model&#10;sudo systemctl status ollama          # Check service&#10;sudo systemctl restart ollama         # Restart service&#10;```&#10;&#10;### Logs:&#10;```bash&#10;tail -f ~/voice-chatbot/logs/hdmi_chatbot.log    # Chatbot logs&#10;journalctl -u ollama -f                          # Ollama logs&#10;systemctl --user status pipewire                 # Audio logs&#10;dmesg | tail                                     # System logs&#10;```&#10;&#10;---&#10;&#10;##  CẤU HÌNH THEO RAM&#10;&#10;| RAM | Whisper | LLM | TTS | Lệnh pull |&#10;|-----|---------|-----|-----|-----------|&#10;| 1GB | tiny | tinyllama:1.1b | espeak | `ollama pull tinyllama:1.1b` |&#10;| 2GB | base | tinyllama:1.1b | gtts | `ollama pull tinyllama:1.1b` |&#10;| 4GB ⭐ | small | qwen2:0.5b | edge | `ollama pull qwen2:0.5b` |&#10;| 8GB  | medium | gemma2:2b | edge | `ollama pull gemma2:2b` |&#10;&#10;---&#10;&#10;##  FIX NHANH LỖI THƯỜNG GẶP&#10;&#10;### ❌ Lỗi package khi cài đặt:&#10;```bash&#10;# libatlas-base-dev không có sẵn&#10;chmod +x quick_fix_packages.sh&#10;./quick_fix_packages.sh&#10;&#10;# language-pack-vi không có sẵn (KHÔNG CẦN - chỉ cần fonts)&#10;sudo apt install -y fonts-noto-cjk fonts-noto-cjk-extra fonts-dejavu&#10;&#10;# Fix tất cả lỗi phổ biến&#10;chmod +x fix_common_errors.sh&#10;./fix_common_errors.sh&#10;```&#10;&#10;### ❌ Không tìm thấy mic:&#10;```bash&#10;wpctl status | grep -A 10 &quot;Audio/Source&quot;&#10;MIC_TARGET=&lt;ID&gt; ./start_hdmi_chatbot.sh&#10;```&#10;&#10;### ❌ Ollama lỗi:&#10;```bash&#10;sudo systemctl restart ollama&#10;ollama pull qwen2:0.5b&#10;```&#10;&#10;### ❌ Out of memory:&#10;```bash&#10;nano config.py&#10;# Đổi: WHISPER_MODEL = &quot;tiny&quot;&#10;# Đổi: LLM_MODEL = &quot;tinyllama:1.1b&quot;&#10;```&#10;&#10;### ❌ Python lỗi:&#10;```bash&#10;cd ~/voice-chatbot&#10;source .venv/bin/activate&#10;pip install -r requirements.txt&#10;```&#10;&#10;### ❌ Pi quá nóng (&gt;70°C):&#10;```bash&#10;# Thêm heatsink/fan!&#10;vcgencmd measure_temp&#10;```&#10;&#10;### ❌ Giọng không tự nhiên:&#10;```bash&#10;nano config.py&#10;# Đổi: TTS_ENGINE = &quot;edge&quot;  # Cần internet&#10;```&#10;&#10;### ❌ GPIO lỗi:&#10;```bash&#10;sudo usermod -aG gpio,spi $USER&#10;sudo reboot&#10;export GPIOZERO_PIN_FACTORY=rpigpio&#10;```&#10;&#10;---&#10;&#10;##  CÁC CÂU NÓI MẪU&#10;&#10;### Tiếng Việt:&#10;```&#10;&quot;Xin chào Tiến Minh&quot;&#10;&quot;Chào bạn&quot;&#10;&quot;Tiến Minh ơi, thời tiết hôm nay thế nào?&quot;&#10;&quot;Hãy kể cho tôi một câu chuyện&quot;&#10;&quot;Bạn có thể làm gì?&quot;&#10;```&#10;&#10;### English:&#10;```&#10;&quot;Hey computer&quot;&#10;&quot;Hello assistant&quot;&#10;&quot;What's the weather today?&quot;&#10;&quot;Tell me a joke&quot;&#10;```&#10;&#10;---&#10;&#10;##  CẤU TRÚC QUAN TRỌNG&#10;&#10;```&#10;~/voice-chatbot/&#10;├── hdmi_chatbot_vietnamese.py    ⭐ Main program (GUI)&#10;├── chatbot_vietnamese.py          Terminal version&#10;├── config.py                      ⚙️ Cấu hình (edit file này)&#10;├── start_hdmi_chatbot.sh          Script chạy&#10;├── pi4_auto_setup.sh              Script cài đặt&#10;└── .venv/                          Python environment&#10;```&#10;&#10;---&#10;&#10;## ⚙️ EDIT CẤU HÌNH&#10;&#10;```bash&#10;nano ~/voice-chatbot/config.py&#10;```&#10;&#10;**Các thông số quan trọng:**&#10;```python&#10;WHISPER_MODEL = &quot;small&quot;           # tiny/base/small/medium&#10;LLM_MODEL = &quot;qwen2:0.5b&quot;          # Model Ollama&#10;TTS_ENGINE = &quot;edge&quot;               # espeak/gtts/edge&#10;DEFAULT_LANGUAGE = &quot;vi&quot;           # vi/en/auto&#10;SILENCE_THRESHOLD = 120           # Độ nhạy mic (cao = ít nhạy)&#10;MAX_RECORDING_MS = 15000          # Max thời gian ghi (ms)&#10;```&#10;&#10;---&#10;&#10;##  UPDATE&#10;&#10;```bash&#10;# Update code&#10;cd ~/voice-chatbot &amp;&amp; git pull&#10;&#10;# Update models&#10;ollama pull qwen2:0.5b&#10;&#10;# Update packages&#10;source .venv/bin/activate&#10;pip install --upgrade -r requirements.txt&#10;```&#10;&#10;---&#10;&#10;##  EMERGENCY&#10;&#10;### Chatbot không phản hồi:&#10;```bash&#10;pkill -f chatbot&#10;./start_hdmi_chatbot.sh&#10;```&#10;&#10;### Hệ thống lag:&#10;```bash&#10;sudo reboot&#10;```&#10;&#10;### Reset toàn bộ:&#10;```bash&#10;cd ~/voice-chatbot&#10;rm -rf .venv&#10;./pi4_auto_setup.sh&#10;```&#10;&#10;---&#10;&#10;##  MONITOR&#10;&#10;```bash&#10;# CPU/RAM real-time&#10;htop&#10;&#10;# Nhiệt độ real-time&#10;watch -n 1 vcgencmd measure_temp&#10;&#10;# Audio devices real-time&#10;watch -n 2 wpctl status&#10;&#10;# Chatbot logs real-time&#10;tail -f ~/voice-chatbot/logs/hdmi_chatbot.log&#10;```&#10;&#10;---&#10;&#10;## ️ GPIO PINS (Tùy chọn)&#10;&#10;```python&#10;STOP_BUTTON_PIN = 22      # Dừng chatbot&#10;PAUSE_BUTTON_PIN = 23     # Tạm dừng&#10;RESUME_BUTTON_PIN = 24    # Tiếp tục&#10;```&#10;&#10;Kết nối: Pin → GPIO → GND&#10;&#10;---&#10;&#10;##  TEST RIÊNG TỪNG PHẦN&#10;&#10;```bash&#10;cd ~/voice-chatbot&#10;source .venv/bin/activate&#10;&#10;# Test mic&#10;python3 -c &quot;import sounddevice as sd; print(sd.query_devices())&quot;&#10;&#10;# Test TTS&#10;python3 test_vietnamese_tts.py&#10;&#10;# Test Whisper&#10;python3 -c &quot;from faster_whisper import WhisperModel; m=WhisperModel('small'); print('OK')&quot;&#10;&#10;# Test Ollama&#10;ollama run qwen2:0.5b &quot;Xin chào&quot;&#10;&#10;# Test Pygame (GUI)&#10;python3 -c &quot;import pygame; pygame.init(); print('OK')&quot;&#10;```&#10;&#10;---&#10;&#10;##  BACKUP QUAN TRỌNG&#10;&#10;```bash&#10;# Backup config&#10;cp config.py config.py.backup&#10;&#10;# Backup .env&#10;cp .env .env.backup&#10;&#10;# Backup toàn bộ&#10;tar -czf ~/chatbot-backup-$(date +%Y%m%d).tar.gz ~/voice-chatbot&#10;```&#10;&#10;---&#10;&#10;##  FILES HƯỚNG DẪN&#10;&#10;| File | Mục đích |&#10;|------|----------|&#10;| **QUICKSTART_PI4.md** | ⭐ BẮT ĐẦU TẠI ĐÂY |&#10;| **PI4_OPTIMIZATION_GUIDE.md** | Chi tiết tối ưu |&#10;| **RAM_GUIDE.md** | Chọn config theo RAM |&#10;| **PROJECT_STRUCTURE.md** | Giải thích files |&#10;| **README.md** | Tham khảo đầy đủ |&#10;&#10;---&#10;&#10;##  WORKFLOW NHANH&#10;&#10;### Lần đầu setup:&#10;```bash&#10;1. Clone repo&#10;2. ./pi4_auto_setup.sh&#10;3. sudo reboot&#10;4. Pair Bluetooth speaker&#10;5. ./start_hdmi_chatbot.sh&#10;```&#10;&#10;### Chạy hàng ngày:&#10;```bash&#10;chatbot              # Vào thư mục&#10;start-chatbot        # Chạy&#10;```&#10;&#10;### Khi lỗi:&#10;```bash&#10;./quick_test.sh      # Test&#10;check-pi4            # Check system&#10;tail -f logs/...     # Xem logs&#10;```&#10;&#10;---&#10;&#10;**Print file này ra để tham khảo nhanh!** &#10;&#10;*Raspberry Pi 4 Vietnamese Voice Chatbot - Quick Reference v2.0*&#10;&#10;" />
              <option name="updatedContent" value="# ⚡ CHEAT SHEET - Vietnamese Voice Chatbot Pi 4&#10;&#10;##  CÀI ĐẶT NHANH (1 LỆNH)&#10;&#10;```bash&#10;cd ~ &amp;&amp; git clone https://github.com/YOUR_USERNAME/voice-chatbot.git &amp;&amp; cd voice-chatbot &amp;&amp; chmod +x pi4_auto_setup.sh &amp;&amp; ./pi4_auto_setup.sh&#10;```&#10;&#10;---&#10;&#10;##  LỆNH THƯỜNG DÙNG&#10;&#10;### Chạy chatbot:&#10;```bash&#10;cd ~/voice-chatbot &amp;&amp; ./start_hdmi_chatbot.sh    # GUI HDMI (khuyến nghị)&#10;chatbot &amp;&amp; start-chatbot                          # Alias ngắn&#10;python3 chatbot_vietnamese.py --lang vi          # Terminal only&#10;```&#10;&#10;### Kiểm tra:&#10;```bash&#10;./pi4_system_check.sh      # Kiểm tra toàn bộ hệ thống&#10;./quick_test.sh            # Test nhanh&#10;free -h                    # Check RAM&#10;vcgencmd measure_temp      # Check nhiệt độ&#10;```&#10;&#10;### Audio:&#10;```bash&#10;wpctl status                          # List tất cả audio devices&#10;wpctl status | grep &quot;Audio/Source&quot;    # List microphones&#10;wpctl status | grep &quot;Audio/Sink&quot;      # List speakers&#10;wpctl set-default &lt;ID&gt;                # Set default device&#10;```&#10;&#10;### Bluetooth:&#10;```bash&#10;bluetoothctl                # Vào Bluetooth control&#10;&gt; power on&#10;&gt; scan on&#10;&gt; pair XX:XX:XX:XX:XX:XX&#10;&gt; trust XX:XX:XX:XX:XX:XX&#10;&gt; connect XX:XX:XX:XX:XX:XX&#10;&gt; exit&#10;```&#10;&#10;### Ollama:&#10;```bash&#10;ollama list                           # List models&#10;ollama pull qwen2:0.5b               # Download model&#10;ollama run qwen2:0.5b &quot;Test&quot;         # Test model&#10;sudo systemctl status ollama          # Check service&#10;sudo systemctl restart ollama         # Restart service&#10;```&#10;&#10;### Logs:&#10;```bash&#10;tail -f ~/voice-chatbot/logs/hdmi_chatbot.log    # Chatbot logs&#10;journalctl -u ollama -f                          # Ollama logs&#10;systemctl --user status pipewire                 # Audio logs&#10;dmesg | tail                                     # System logs&#10;```&#10;&#10;---&#10;&#10;##  CẤU HÌNH THEO RAM&#10;&#10;| RAM | Whisper | LLM | TTS | Lệnh pull |&#10;|-----|---------|-----|-----|-----------|&#10;| 1GB | tiny | tinyllama:1.1b | espeak | `ollama pull tinyllama:1.1b` |&#10;| 2GB | base | tinyllama:1.1b | gtts | `ollama pull tinyllama:1.1b` |&#10;| 4GB ⭐ | small | qwen2:0.5b | edge | `ollama pull qwen2:0.5b` |&#10;| 8GB  | medium | gemma2:2b | edge | `ollama pull gemma2:2b` |&#10;&#10;---&#10;&#10;##  FIX NHANH LỖI THƯỜNG GẶP&#10;&#10;### ❌ Lỗi package khi cài đặt:&#10;```bash&#10;# libatlas-base-dev không có sẵn&#10;chmod +x quick_fix_packages.sh&#10;./quick_fix_packages.sh&#10;&#10;# language-pack-vi không có sẵn (KHÔNG CẦN - chỉ cần fonts)&#10;sudo apt install -y fonts-noto-cjk fonts-noto-cjk-extra fonts-dejavu&#10;&#10;# Fix tất cả lỗi phổ biến&#10;chmod +x fix_common_errors.sh&#10;./fix_common_errors.sh&#10;```&#10;&#10;### ❌ Missing packages error:&#10;```bash&#10;# Quick fix (1 minute)&#10;chmod +x quick_fix_now.sh&#10;./quick_fix_now.sh&#10;&#10;# Then try again&#10;./start_hdmi_chatbot.sh&#10;```&#10;&#10;### ❌ Không tìm thấy mic:&#10;```bash&#10;wpctl status | grep -A 10 &quot;Audio/Source&quot;&#10;MIC_TARGET=&lt;ID&gt; ./start_hdmi_chatbot.sh&#10;```&#10;&#10;### ❌ Ollama lỗi:&#10;```bash&#10;sudo systemctl restart ollama&#10;ollama pull qwen2:0.5b&#10;```&#10;&#10;### ❌ Out of memory:&#10;```bash&#10;nano config.py&#10;# Đổi: WHISPER_MODEL = &quot;tiny&quot;&#10;# Đổi: LLM_MODEL = &quot;tinyllama:1.1b&quot;&#10;```&#10;&#10;### ❌ Python lỗi:&#10;```bash&#10;cd ~/voice-chatbot&#10;source .venv/bin/activate&#10;pip install -r requirements.txt&#10;```&#10;&#10;### ❌ Pi quá nóng (&gt;70°C):&#10;```bash&#10;# Thêm heatsink/fan!&#10;vcgencmd measure_temp&#10;```&#10;&#10;### ❌ Giọng không tự nhiên:&#10;```bash&#10;nano config.py&#10;# Đổi: TTS_ENGINE = &quot;edge&quot;  # Cần internet&#10;```&#10;&#10;### ❌ GPIO lỗi:&#10;```bash&#10;sudo usermod -aG gpio,spi $USER&#10;sudo reboot&#10;export GPIOZERO_PIN_FACTORY=rpigpio&#10;```&#10;&#10;---&#10;&#10;##  CÁC CÂU NÓI MẪU&#10;&#10;### Tiếng Việt:&#10;```&#10;&quot;Xin chào Tiến Minh&quot;&#10;&quot;Chào bạn&quot;&#10;&quot;Tiến Minh ơi, thời tiết hôm nay thế nào?&quot;&#10;&quot;Hãy kể cho tôi một câu chuyện&quot;&#10;&quot;Bạn có thể làm gì?&quot;&#10;```&#10;&#10;### English:&#10;```&#10;&quot;Hey computer&quot;&#10;&quot;Hello assistant&quot;&#10;&quot;What's the weather today?&quot;&#10;&quot;Tell me a joke&quot;&#10;```&#10;&#10;---&#10;&#10;##  CẤU TRÚC QUAN TRỌNG&#10;&#10;```&#10;~/voice-chatbot/&#10;├── hdmi_chatbot_vietnamese.py    ⭐ Main program (GUI)&#10;├── chatbot_vietnamese.py          Terminal version&#10;├── config.py                      ⚙️ Cấu hình (edit file này)&#10;├── start_hdmi_chatbot.sh          Script chạy&#10;├── pi4_auto_setup.sh              Script cài đặt&#10;└── .venv/                          Python environment&#10;```&#10;&#10;---&#10;&#10;## ⚙️ EDIT CẤU HÌNH&#10;&#10;```bash&#10;nano ~/voice-chatbot/config.py&#10;```&#10;&#10;**Các thông số quan trọng:**&#10;```python&#10;WHISPER_MODEL = &quot;small&quot;           # tiny/base/small/medium&#10;LLM_MODEL = &quot;qwen2:0.5b&quot;          # Model Ollama&#10;TTS_ENGINE = &quot;edge&quot;               # espeak/gtts/edge&#10;DEFAULT_LANGUAGE = &quot;vi&quot;           # vi/en/auto&#10;SILENCE_THRESHOLD = 120           # Độ nhạy mic (cao = ít nhạy)&#10;MAX_RECORDING_MS = 15000          # Max thời gian ghi (ms)&#10;```&#10;&#10;---&#10;&#10;##  UPDATE&#10;&#10;```bash&#10;# Update code&#10;cd ~/voice-chatbot &amp;&amp; git pull&#10;&#10;# Update models&#10;ollama pull qwen2:0.5b&#10;&#10;# Update packages&#10;source .venv/bin/activate&#10;pip install --upgrade -r requirements.txt&#10;```&#10;&#10;---&#10;&#10;##  EMERGENCY&#10;&#10;### Chatbot không phản hồi:&#10;```bash&#10;pkill -f chatbot&#10;./start_hdmi_chatbot.sh&#10;```&#10;&#10;### Hệ thống lag:&#10;```bash&#10;sudo reboot&#10;```&#10;&#10;### Reset toàn bộ:&#10;```bash&#10;cd ~/voice-chatbot&#10;rm -rf .venv&#10;./pi4_auto_setup.sh&#10;```&#10;&#10;---&#10;&#10;##  MONITOR&#10;&#10;```bash&#10;# CPU/RAM real-time&#10;htop&#10;&#10;# Nhiệt độ real-time&#10;watch -n 1 vcgencmd measure_temp&#10;&#10;# Audio devices real-time&#10;watch -n 2 wpctl status&#10;&#10;# Chatbot logs real-time&#10;tail -f ~/voice-chatbot/logs/hdmi_chatbot.log&#10;```&#10;&#10;---&#10;&#10;## ️ GPIO PINS (Tùy chọn)&#10;&#10;```python&#10;STOP_BUTTON_PIN = 22      # Dừng chatbot&#10;PAUSE_BUTTON_PIN = 23     # Tạm dừng&#10;RESUME_BUTTON_PIN = 24    # Tiếp tục&#10;```&#10;&#10;Kết nối: Pin → GPIO → GND&#10;&#10;---&#10;&#10;##  TEST RIÊNG TỪNG PHẦN&#10;&#10;```bash&#10;cd ~/voice-chatbot&#10;source .venv/bin/activate&#10;&#10;# Test mic&#10;python3 -c &quot;import sounddevice as sd; print(sd.query_devices())&quot;&#10;&#10;# Test TTS&#10;python3 test_vietnamese_tts.py&#10;&#10;# Test Whisper&#10;python3 -c &quot;from faster_whisper import WhisperModel; m=WhisperModel('small'); print('OK')&quot;&#10;&#10;# Test Ollama&#10;ollama run qwen2:0.5b &quot;Xin chào&quot;&#10;&#10;# Test Pygame (GUI)&#10;python3 -c &quot;import pygame; pygame.init(); print('OK')&quot;&#10;```&#10;&#10;---&#10;&#10;##  BACKUP QUAN TRỌNG&#10;&#10;```bash&#10;# Backup config&#10;cp config.py config.py.backup&#10;&#10;# Backup .env&#10;cp .env .env.backup&#10;&#10;# Backup toàn bộ&#10;tar -czf ~/chatbot-backup-$(date +%Y%m%d).tar.gz ~/voice-chatbot&#10;```&#10;&#10;---&#10;&#10;##  FILES HƯỚNG DẪN&#10;&#10;| File | Mục đích |&#10;|------|----------|&#10;| **QUICKSTART_PI4.md** | ⭐ BẮT ĐẦU TẠI ĐÂY |&#10;| **PI4_OPTIMIZATION_GUIDE.md** | Chi tiết tối ưu |&#10;| **RAM_GUIDE.md** | Chọn config theo RAM |&#10;| **PROJECT_STRUCTURE.md** | Giải thích files |&#10;| **README.md** | Tham khảo đầy đủ |&#10;&#10;---&#10;&#10;##  WORKFLOW NHANH&#10;&#10;### Lần đầu setup:&#10;```bash&#10;1. Clone repo&#10;2. ./pi4_auto_setup.sh&#10;3. sudo reboot&#10;4. Pair Bluetooth speaker&#10;5. ./start_hdmi_chatbot.sh&#10;```&#10;&#10;### Chạy hàng ngày:&#10;```bash&#10;chatbot              # Vào thư mục&#10;start-chatbot        # Chạy&#10;```&#10;&#10;### Khi lỗi:&#10;```bash&#10;./quick_test.sh      # Test&#10;check-pi4            # Check system&#10;tail -f logs/...     # Xem logs&#10;```&#10;&#10;---&#10;&#10;**Print file này ra để tham khảo nhanh!** &#10;&#10;*Raspberry Pi 4 Vietnamese Voice Chatbot - Quick Reference v2.0*&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/start_hdmi_chatbot.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/start_hdmi_chatbot.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;# Startup script for HDMI Voice Chatbot Vietnamese&#10;# Raspberry Pi 4 Model B 8GB RAM optimized&#10;&#10;set -e&#10;&#10;SCRIPT_DIR=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;&amp; pwd)&quot;&#10;CHATBOT_SCRIPT=&quot;$SCRIPT_DIR/hdmi_chatbot_vietnamese.py&quot;&#10;LOG_FILE=&quot;$SCRIPT_DIR/logs/hdmi_chatbot.log&quot;&#10;PID_FILE=&quot;$SCRIPT_DIR/logs/hdmi_chatbot.pid&quot;&#10;&#10;# Colors for output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m' # No Color&#10;&#10;# Create logs directory&#10;mkdir -p &quot;$SCRIPT_DIR/logs&quot;&#10;&#10;echo -e &quot;${BLUE}️ Tiến Minh - Vietnamese HDMI Voice Chatbot Startup${NC}&quot;&#10;echo &quot;================================================================&quot;&#10;&#10;# Function to log messages&#10;log_message() {&#10;    echo -e &quot;$(date '+%Y-%m-%d %H:%M:%S') - $1&quot; | tee -a &quot;$LOG_FILE&quot;&#10;}&#10;&#10;# Check if already running&#10;check_running() {&#10;    if [ -f &quot;$PID_FILE&quot; ]; then&#10;        local pid=$(cat &quot;$PID_FILE&quot;)&#10;        if ps -p $pid &gt; /dev/null 2&gt;&amp;1; then&#10;            echo -e &quot;${YELLOW}⚠️ Chatbot is already running (PID: $pid)${NC}&quot;&#10;            echo &quot;Use 'pkill -f hdmi_chatbot_vietnamese.py' to stop it first&quot;&#10;            exit 1&#10;        else&#10;            rm -f &quot;$PID_FILE&quot;&#10;        fi&#10;    fi&#10;}&#10;&#10;# System checks&#10;check_system() {&#10;    log_message &quot; Performing system checks...&quot;&#10;    &#10;    # Check if running on Pi 4&#10;    if [ -f /sys/firmware/devicetree/base/model ]; then&#10;        model=$(cat /sys/firmware/devicetree/base/model)&#10;        log_message &quot; Hardware: $model&quot;&#10;        if [[ &quot;$model&quot; != *&quot;Raspberry Pi 4&quot;* ]]; then&#10;            log_message &quot;⚠️ Warning: Not running on Pi 4, some optimizations may not apply&quot;&#10;        fi&#10;    fi&#10;    &#10;    # Check memory&#10;    total_mem=$(free -h | awk '/^Mem:/ {print $2}')&#10;    log_message &quot; Available RAM: $total_mem&quot;&#10;    &#10;    # Check display&#10;    if [ -n &quot;$DISPLAY&quot; ] || [ -n &quot;$WAYLAND_DISPLAY&quot; ]; then&#10;        log_message &quot;️ Display environment detected&quot;&#10;    else&#10;        log_message &quot;⚠️ No display environment detected, setting DISPLAY=:0&quot;&#10;        export DISPLAY=:0&#10;    fi&#10;    &#10;    # Check audio&#10;    if command -v pw-cat &gt; /dev/null; then&#10;        log_message &quot; PipeWire audio system detected&quot;&#10;    else&#10;        log_message &quot;❌ PipeWire not found - audio may not work&quot;&#10;    fi&#10;    &#10;    # Check Ollama&#10;    if systemctl is-active --quiet ollama; then&#10;        log_message &quot;✅ Ollama service is running&quot;&#10;    else&#10;        log_message &quot; Starting Ollama service...&quot;&#10;        sudo systemctl start ollama || {&#10;            log_message &quot;❌ Failed to start Ollama&quot;&#10;            exit 1&#10;        }&#10;        sleep 3&#10;    fi&#10;    &#10;    # Check Python packages&#10;    log_message &quot; Checking Python environment...&quot;&#10;    python3 -c &quot;&#10;import sys&#10;required_packages = [&#10;    'numpy', 'pygame', 'faster_whisper', 'ollama', &#10;    'gtts', 'gpiozero', 'opencv-python'&#10;]&#10;missing = []&#10;for package in required_packages:&#10;    try:&#10;        __import__(package.replace('-', '_'))&#10;    except ImportError:&#10;        missing.append(package)&#10;&#10;if missing:&#10;    print(f'❌ Missing packages: {missing}')&#10;    print('Run: pip install ' + ' '.join(missing))&#10;    sys.exit(1)&#10;else:&#10;    print('✅ All required packages available')&#10;&quot; || {&#10;        log_message &quot;❌ Python package check failed&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${RED}╔══════════════════════════════════════════════════════════════╗${NC}&quot;&#10;        echo -e &quot;${RED}║                    MISSING PACKAGES ERROR                   ║${NC}&quot;&#10;        echo -e &quot;${RED}╚══════════════════════════════════════════════════════════════╝${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${CYAN}The auto-setup didn't complete properly. Here's how to fix:${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 1: Run the fix script (RECOMMENDED)${NC}&quot;&#10;        echo -e &quot;  ${GREEN}chmod +x fix_missing_packages.sh${NC}&quot;&#10;        echo -e &quot;  ${GREEN}./fix_missing_packages.sh${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 2: Manual fix${NC}&quot;&#10;        echo -e &quot;  ${GREEN}source .venv/bin/activate${NC}&quot;&#10;        echo -e &quot;  ${GREEN}pip install faster-whisper ollama gtts opencv-python${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 3: Re-run complete setup${NC}&quot;&#10;        echo -e &quot;  ${GREEN}./pi4_auto_setup.sh${NC}&quot;&#10;        echo &quot;&quot;&#10;        exit 1&#10;    }&#10;}&#10;&#10;# Set environment variables for Pi 4 optimization&#10;setup_environment() {&#10;    log_message &quot;⚙️ Setting up environment for Pi 4...&quot;&#10;    &#10;    # GPIO library selection for Pi 4&#10;    export GPIOZERO_PIN_FACTORY=rpigpio&#10;    &#10;    # Pygame optimization&#10;    export SDL_AUDIODRIVER=pulse&#10;    export SDL_VIDEODRIVER=x11&#10;    &#10;    # PipeWire optimization&#10;    export PIPEWIRE_LATENCY=&quot;128/48000&quot;&#10;    &#10;    # CPU optimization for Pi 4&#10;    export OMP_NUM_THREADS=4&#10;    export OPENBLAS_NUM_THREADS=2&#10;    &#10;    log_message &quot; Environment configured for Pi 4 optimization&quot;&#10;}&#10;&#10;# Language selection&#10;select_language() {&#10;    if [ -z &quot;$CHATBOT_LANG&quot; ]; then&#10;        echo -e &quot;${BLUE} Select language / Chọn ngôn ngữ:${NC}&quot;&#10;        echo &quot;1) Vietnamese (Tiếng Việt) - Default&quot;&#10;        echo &quot;2) English&quot;  &#10;        echo &quot;3) Auto-detect&quot;&#10;        echo&#10;        read -p &quot;Enter choice (1-3) [1]: &quot; lang_choice&#10;        &#10;        case ${lang_choice:-1} in&#10;            1) CHATBOT_LANG=&quot;vi&quot; ;;&#10;            2) CHATBOT_LANG=&quot;en&quot; ;;&#10;            3) CHATBOT_LANG=&quot;auto&quot; ;;&#10;            *) CHATBOT_LANG=&quot;vi&quot; ;;&#10;        esac&#10;    fi&#10;    &#10;    log_message &quot;️ Language set to: $CHATBOT_LANG&quot;&#10;}&#10;&#10;# Microphone selection&#10;select_microphone() {&#10;    if command -v pw-cli &gt; /dev/null; then&#10;        echo -e &quot;${BLUE} Available microphones:${NC}&quot;&#10;        pw-cli ls Node | grep -A5 -B5 &quot;input&quot; | grep -E &quot;(node.name|node.description)&quot; | head -10&#10;        echo&#10;        read -p &quot;Enter microphone target (or press Enter for default): &quot; mic_target&#10;        if [ -n &quot;$mic_target&quot; ]; then&#10;            MIC_TARGET=&quot;--mic-target $mic_target&quot;&#10;            log_message &quot; Microphone target: $mic_target&quot;&#10;        fi&#10;    fi&#10;}&#10;&#10;# Start chatbot&#10;start_chatbot() {&#10;    log_message &quot; Starting HDMI Vietnamese Voice Chatbot...&quot;&#10;    &#10;    # Build command&#10;    cmd=&quot;python3 '$CHATBOT_SCRIPT' --lang $CHATBOT_LANG $MIC_TARGET&quot;&#10;    log_message &quot; Command: $cmd&quot;&#10;    &#10;    # Start in background and save PID&#10;    eval &quot;nohup $cmd &gt; '$LOG_FILE' 2&gt;&amp;1 &amp;&quot;&#10;    local pid=$!&#10;    echo $pid &gt; &quot;$PID_FILE&quot;&#10;    &#10;    log_message &quot;✅ Chatbot started with PID: $pid&quot;&#10;    log_message &quot; Log file: $LOG_FILE&quot;&#10;    &#10;    echo -e &quot;${GREEN}================================================================${NC}&quot;&#10;    echo -e &quot;${GREEN} Tiến Minh - HDMI Vietnamese Voice Chatbot is now running!${NC}&quot;&#10;    echo -e &quot;${GREEN}================================================================${NC}&quot;&#10;    echo&#10;    echo &quot; Display: Check your HDMI monitor for the GUI interface&quot;&#10;    echo &quot; Microphone: USB microphone via PipeWire&quot;&#10;    echo &quot; Audio: Bluetooth speakers or 3.5mm output&quot;&#10;    echo &quot; Logs: tail -f '$LOG_FILE'&quot;&#10;    echo &quot;⏹️ Stop: pkill -f hdmi_chatbot_vietnamese.py&quot;&#10;    echo &quot; Hardware buttons: GPIO 22 (stop), GPIO 23 (pause), GPIO 24 (resume)&quot;&#10;    echo&#10;    echo &quot;Usage instructions:&quot;&#10;    echo &quot;• Look at your HDMI monitor for the chatbot interface&quot;&#10;    echo &quot;• Say 'Xin chào' (Vietnamese) or 'Hello' (English) to start&quot;&#10;    echo &quot;• The GUI will show conversation history and status&quot;&#10;    echo &quot;• Say 'Tạm biệt' or 'Goodbye' to exit&quot;&#10;    echo&#10;    &#10;    # Monitor for a few seconds&#10;    sleep 3&#10;    if ps -p $pid &gt; /dev/null; then&#10;        echo -e &quot;${GREEN}✅ Chatbot is running successfully${NC}&quot;&#10;    else&#10;        echo -e &quot;${RED}❌ Chatbot failed to start - check logs${NC}&quot;&#10;        cat &quot;$LOG_FILE&quot; | tail -20&#10;        exit 1&#10;    fi&#10;}&#10;&#10;# Cleanup function&#10;cleanup() {&#10;    if [ -f &quot;$PID_FILE&quot; ]; then&#10;        local pid=$(cat &quot;$PID_FILE&quot;)&#10;        if ps -p $pid &gt; /dev/null 2&gt;&amp;1; then&#10;            kill $pid&#10;            log_message &quot; Chatbot stopped (PID: $pid)&quot;&#10;        fi&#10;        rm -f &quot;$PID_FILE&quot;&#10;    fi&#10;}&#10;&#10;# Trap cleanup on exit&#10;trap cleanup EXIT&#10;&#10;# Main execution&#10;main() {&#10;    # Parse command line arguments&#10;    while [[ $# -gt 0 ]]; do&#10;        case $1 in&#10;            --lang)&#10;                CHATBOT_LANG=&quot;$2&quot;&#10;                shift 2&#10;                ;;&#10;            --mic-target)&#10;                MIC_TARGET=&quot;--mic-target $2&quot;&#10;                shift 2&#10;                ;;&#10;            --daemon)&#10;                DAEMON_MODE=1&#10;                shift&#10;                ;;&#10;            --help)&#10;                echo &quot;Tiến Minh - HDMI Vietnamese Voice Chatbot Startup Script&quot;&#10;                echo&#10;                echo &quot;Usage: $0 [options]&quot;&#10;                echo &quot;  --lang &lt;vi|en|auto&gt;      Set language&quot;&#10;                echo &quot;  --mic-target &lt;target&gt;    Set microphone target&quot;&#10;                echo &quot;  --daemon                 Run in daemon mode (no interactive prompts)&quot;&#10;                echo &quot;  --help                   Show this help&quot;&#10;                exit 0&#10;                ;;&#10;            *)&#10;                echo &quot;Unknown option: $1&quot;&#10;                echo &quot;Use --help for usage information&quot;&#10;                exit 1&#10;                ;;&#10;        esac&#10;    done&#10;    &#10;    check_running&#10;    check_system&#10;    setup_environment&#10;    &#10;    # Interactive setup unless in daemon mode&#10;    if [ -z &quot;$DAEMON_MODE&quot; ]; then&#10;        select_language&#10;        select_microphone&#10;    else&#10;        CHATBOT_LANG=${CHATBOT_LANG:-vi}&#10;        log_message &quot; Running in daemon mode with language: $CHATBOT_LANG&quot;&#10;    fi&#10;    &#10;    start_chatbot&#10;}&#10;&#10;# Run main function&#10;main &quot;$@&quot;" />
              <option name="updatedContent" value="#!/bin/bash&#10;# Startup script for HDMI Voice Chatbot Vietnamese&#10;# Raspberry Pi 4 Model B 8GB RAM optimized&#10;&#10;set -e&#10;&#10;SCRIPT_DIR=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;&amp; pwd)&quot;&#10;CHATBOT_SCRIPT=&quot;$SCRIPT_DIR/hdmi_chatbot_vietnamese.py&quot;&#10;LOG_FILE=&quot;$SCRIPT_DIR/logs/hdmi_chatbot.log&quot;&#10;PID_FILE=&quot;$SCRIPT_DIR/logs/hdmi_chatbot.pid&quot;&#10;&#10;# Colors for output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m' # No Color&#10;&#10;# Create logs directory&#10;mkdir -p &quot;$SCRIPT_DIR/logs&quot;&#10;&#10;echo -e &quot;${BLUE}️ Tiến Minh - Vietnamese HDMI Voice Chatbot Startup${NC}&quot;&#10;echo &quot;================================================================&quot;&#10;&#10;# Function to log messages&#10;log_message() {&#10;    echo -e &quot;$(date '+%Y-%m-%d %H:%M:%S') - $1&quot; | tee -a &quot;$LOG_FILE&quot;&#10;}&#10;&#10;# Check if already running&#10;check_running() {&#10;    if [ -f &quot;$PID_FILE&quot; ]; then&#10;        local pid=$(cat &quot;$PID_FILE&quot;)&#10;        if ps -p $pid &gt; /dev/null 2&gt;&amp;1; then&#10;            echo -e &quot;${YELLOW}⚠️ Chatbot is already running (PID: $pid)${NC}&quot;&#10;            echo &quot;Use 'pkill -f hdmi_chatbot_vietnamese.py' to stop it first&quot;&#10;            exit 1&#10;        else&#10;            rm -f &quot;$PID_FILE&quot;&#10;        fi&#10;    fi&#10;}&#10;&#10;# System checks&#10;check_system() {&#10;    log_message &quot; Performing system checks...&quot;&#10;    &#10;    # Check if running on Pi 4&#10;    if [ -f /sys/firmware/devicetree/base/model ]; then&#10;        model=$(cat /sys/firmware/devicetree/base/model)&#10;        log_message &quot; Hardware: $model&quot;&#10;        if [[ &quot;$model&quot; != *&quot;Raspberry Pi 4&quot;* ]]; then&#10;            log_message &quot;⚠️ Warning: Not running on Pi 4, some optimizations may not apply&quot;&#10;        fi&#10;    fi&#10;    &#10;    # Check memory&#10;    total_mem=$(free -h | awk '/^Mem:/ {print $2}')&#10;    log_message &quot; Available RAM: $total_mem&quot;&#10;    &#10;    # Check display&#10;    if [ -n &quot;$DISPLAY&quot; ] || [ -n &quot;$WAYLAND_DISPLAY&quot; ]; then&#10;        log_message &quot;️ Display environment detected&quot;&#10;    else&#10;        log_message &quot;⚠️ No display environment detected, setting DISPLAY=:0&quot;&#10;        export DISPLAY=:0&#10;    fi&#10;    &#10;    # Check audio&#10;    if command -v pw-cat &gt; /dev/null; then&#10;        log_message &quot; PipeWire audio system detected&quot;&#10;    else&#10;        log_message &quot;❌ PipeWire not found - audio may not work&quot;&#10;    fi&#10;    &#10;    # Check Ollama&#10;    if systemctl is-active --quiet ollama; then&#10;        log_message &quot;✅ Ollama service is running&quot;&#10;    else&#10;        log_message &quot; Starting Ollama service...&quot;&#10;        sudo systemctl start ollama || {&#10;            log_message &quot;❌ Failed to start Ollama&quot;&#10;            exit 1&#10;        }&#10;        sleep 3&#10;    fi&#10;    &#10;    # Check Python packages&#10;    log_message &quot; Checking Python environment...&quot;&#10;    python3 -c &quot;&#10;import sys&#10;required_packages = [&#10;    'numpy', 'pygame', 'faster_whisper', 'ollama', &#10;    'gtts', 'gpiozero', 'opencv-python'&#10;]&#10;missing = []&#10;for package in required_packages:&#10;    try:&#10;        __import__(package.replace('-', '_'))&#10;    except ImportError:&#10;        missing.append(package)&#10;&#10;if missing:&#10;    print(f'❌ Missing packages: {missing}')&#10;    print('Run: pip install ' + ' '.join(missing))&#10;    sys.exit(1)&#10;else:&#10;    print('✅ All required packages available')&#10;&quot; || {&#10;        log_message &quot;❌ Python package check failed&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${RED}╔══════════════════════════════════════════════════════════════╗${NC}&quot;&#10;        echo -e &quot;${RED}║                    MISSING PACKAGES ERROR                   ║${NC}&quot;&#10;        echo -e &quot;${RED}╚══════════════════════════════════════════════════════════════╝${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${CYAN}The auto-setup didn't complete properly. Here's how to fix:${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 1: Run the fix script (RECOMMENDED)${NC}&quot;&#10;        echo -e &quot;  ${GREEN}chmod +x fix_missing_packages.sh${NC}&quot;&#10;        echo -e &quot;  ${GREEN}./fix_missing_packages.sh${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 2: Manual fix${NC}&quot;&#10;        echo -e &quot;  ${GREEN}source .venv/bin/activate${NC}&quot;&#10;        echo -e &quot;  ${GREEN}pip install faster-whisper ollama gtts opencv-python${NC}&quot;&#10;        echo &quot;&quot;&#10;        echo -e &quot;${YELLOW}Option 3: Re-run complete setup${NC}&quot;&#10;        echo -e &quot;  ${GREEN}./pi4_auto_setup.sh${NC}&quot;&#10;        echo &quot;&quot;&#10;        exit 1&#10;    }&#10;}&#10;&#10;# Set environment variables for Pi 4 optimization&#10;setup_environment() {&#10;    log_message &quot;⚙️ Setting up environment for Pi 4...&quot;&#10;    &#10;    # GPIO library selection for Pi 4&#10;    export GPIOZERO_PIN_FACTORY=rpigpio&#10;    &#10;    # Pygame optimization&#10;    export SDL_AUDIODRIVER=pulse&#10;    export SDL_VIDEODRIVER=x11&#10;    &#10;    # PipeWire optimization&#10;    export PIPEWIRE_LATENCY=&quot;128/48000&quot;&#10;    &#10;    # CPU optimization for Pi 4&#10;    export OMP_NUM_THREADS=4&#10;    export OPENBLAS_NUM_THREADS=2&#10;    &#10;    log_message &quot; Environment configured for Pi 4 optimization&quot;&#10;}&#10;&#10;# Language selection&#10;select_language() {&#10;    if [ -z &quot;$CHATBOT_LANG&quot; ]; then&#10;        echo -e &quot;${BLUE} Select language / Chọn ngôn ngữ:${NC}&quot;&#10;        echo &quot;1) Vietnamese (Tiếng Việt) - Default&quot;&#10;        echo &quot;2) English&quot;  &#10;        echo &quot;3) Auto-detect&quot;&#10;        echo&#10;        read -p &quot;Enter choice (1-3) [1]: &quot; lang_choice&#10;        &#10;        case ${lang_choice:-1} in&#10;            1) CHATBOT_LANG=&quot;vi&quot; ;;&#10;            2) CHATBOT_LANG=&quot;en&quot; ;;&#10;            3) CHATBOT_LANG=&quot;auto&quot; ;;&#10;            *) CHATBOT_LANG=&quot;vi&quot; ;;&#10;        esac&#10;    fi&#10;    &#10;    log_message &quot;️ Language set to: $CHATBOT_LANG&quot;&#10;}&#10;&#10;# Microphone selection&#10;select_microphone() {&#10;    if command -v pw-cli &gt; /dev/null; then&#10;        echo -e &quot;${BLUE} Available microphones:${NC}&quot;&#10;        pw-cli ls Node | grep -A5 -B5 &quot;input&quot; | grep -E &quot;(node.name|node.description)&quot; | head -10&#10;        echo&#10;        read -p &quot;Enter microphone target (or press Enter for default): &quot; mic_target&#10;        if [ -n &quot;$mic_target&quot; ]; then&#10;            MIC_TARGET=&quot;--mic-target $mic_target&quot;&#10;            log_message &quot; Microphone target: $mic_target&quot;&#10;        fi&#10;    fi&#10;}&#10;&#10;# Start chatbot&#10;start_chatbot() {&#10;    log_message &quot; Starting HDMI Vietnamese Voice Chatbot...&quot;&#10;    &#10;    # Activate virtual environment if it exists&#10;    if [ -f &quot;.venv/bin/activate&quot; ]; then&#10;        log_message &quot; Activating Python virtual environment...&quot;&#10;        source .venv/bin/activate&#10;        log_message &quot;✅ Virtual environment activated&quot;&#10;    else&#10;        log_message &quot;⚠️ No virtual environment found, using system Python&quot;&#10;    fi&#10;    &#10;    # Build command&#10;    cmd=&quot;python3 '$CHATBOT_SCRIPT' --lang $CHATBOT_LANG $MIC_TARGET&quot;&#10;    log_message &quot; Command: $cmd&quot;&#10;    &#10;    # Start in background and save PID&#10;    eval &quot;nohup $cmd &gt; '$LOG_FILE' 2&gt;&amp;1 &amp;&quot;&#10;    local pid=$!&#10;    echo $pid &gt; &quot;$PID_FILE&quot;&#10;    &#10;    log_message &quot;✅ Chatbot started with PID: $pid&quot;&#10;    log_message &quot; Log file: $LOG_FILE&quot;&#10;    &#10;    echo -e &quot;${GREEN}================================================================${NC}&quot;&#10;    echo -e &quot;${GREEN} Tiến Minh - HDMI Vietnamese Voice Chatbot is now running!${NC}&quot;&#10;    echo -e &quot;${GREEN}================================================================${NC}&quot;&#10;    echo&#10;    echo &quot; Display: Check your HDMI monitor for the GUI interface&quot;&#10;    echo &quot; Microphone: USB microphone via PipeWire&quot;&#10;    echo &quot; Audio: Bluetooth speakers or 3.5mm output&quot;&#10;    echo &quot; Logs: tail -f '$LOG_FILE'&quot;&#10;    echo &quot;⏹️ Stop: pkill -f hdmi_chatbot_vietnamese.py&quot;&#10;    echo &quot; Hardware buttons: GPIO 22 (stop), GPIO 23 (pause), GPIO 24 (resume)&quot;&#10;    echo&#10;    echo &quot;Usage instructions:&quot;&#10;    echo &quot;• Look at your HDMI monitor for the chatbot interface&quot;&#10;    echo &quot;• Say 'Xin chào' (Vietnamese) or 'Hello' (English) to start&quot;&#10;    echo &quot;• The GUI will show conversation history and status&quot;&#10;    echo &quot;• Say 'Tạm biệt' or 'Goodbye' to exit&quot;&#10;    echo&#10;    &#10;    # Monitor for a few seconds&#10;    sleep 3&#10;    if ps -p $pid &gt; /dev/null; then&#10;        echo -e &quot;${GREEN}✅ Chatbot is running successfully${NC}&quot;&#10;    else&#10;        echo -e &quot;${RED}❌ Chatbot failed to start - check logs${NC}&quot;&#10;        cat &quot;$LOG_FILE&quot; | tail -20&#10;        exit 1&#10;    fi&#10;}&#10;&#10;# Cleanup function&#10;cleanup() {&#10;    if [ -f &quot;$PID_FILE&quot; ]; then&#10;        local pid=$(cat &quot;$PID_FILE&quot;)&#10;        if ps -p $pid &gt; /dev/null 2&gt;&amp;1; then&#10;            kill $pid&#10;            log_message &quot; Chatbot stopped (PID: $pid)&quot;&#10;        fi&#10;        rm -f &quot;$PID_FILE&quot;&#10;    fi&#10;}&#10;&#10;# Trap cleanup on exit&#10;trap cleanup EXIT&#10;&#10;# Main execution&#10;main() {&#10;    # Parse command line arguments&#10;    while [[ $# -gt 0 ]]; do&#10;        case $1 in&#10;            --lang)&#10;                CHATBOT_LANG=&quot;$2&quot;&#10;                shift 2&#10;                ;;&#10;            --mic-target)&#10;                MIC_TARGET=&quot;--mic-target $2&quot;&#10;                shift 2&#10;                ;;&#10;            --daemon)&#10;                DAEMON_MODE=1&#10;                shift&#10;                ;;&#10;            --help)&#10;                echo &quot;Tiến Minh - HDMI Vietnamese Voice Chatbot Startup Script&quot;&#10;                echo&#10;                echo &quot;Usage: $0 [options]&quot;&#10;                echo &quot;  --lang &lt;vi|en|auto&gt;      Set language&quot;&#10;                echo &quot;  --mic-target &lt;target&gt;    Set microphone target&quot;&#10;                echo &quot;  --daemon                 Run in daemon mode (no interactive prompts)&quot;&#10;                echo &quot;  --help                   Show this help&quot;&#10;                exit 0&#10;                ;;&#10;            *)&#10;                echo &quot;Unknown option: $1&quot;&#10;                echo &quot;Use --help for usage information&quot;&#10;                exit 1&#10;                ;;&#10;        esac&#10;    done&#10;    &#10;    check_running&#10;    check_system&#10;    setup_environment&#10;    &#10;    # Interactive setup unless in daemon mode&#10;    if [ -z &quot;$DAEMON_MODE&quot; ]; then&#10;        select_language&#10;        select_microphone&#10;    else&#10;        CHATBOT_LANG=${CHATBOT_LANG:-vi}&#10;        log_message &quot; Running in daemon mode with language: $CHATBOT_LANG&quot;&#10;    fi&#10;    &#10;    start_chatbot&#10;}&#10;&#10;# Run main function&#10;main &quot;$@&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>